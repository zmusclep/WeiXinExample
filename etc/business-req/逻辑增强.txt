关注微信公众号

1，如果关注者已经是粉丝，则其上级id保持不变，在页面上提示，已经是xx公众号的粉丝，推荐者是谁；
2，同时要记录一下，该粉丝又关注了微信公众号，此次关注的上线是谁




返现逻辑，对root的增强处理
1，root是跟产品相关的，在A产品上是root，在B产品上可能不是
2，通常root是会员体系树，中间的某个节点
3，会员缴纳加盟费成为root，此缴费定义为一个产品，向上三级、及此root之上的root返现
4，普通产品发生消费时，要向上追溯，此粉丝、此产品的root是谁，也就是说，一个粉丝的root，不是一个；一个粉丝+一个产品，对应一个root（不适合用静态的表来记录root，动态追溯可能更适合）


需要改root的名字，本质上不是root，是一个加盟节点

A---A1---A2---A3---B---B1---B2---B3---C---C1---C2---C3
B是A的下线
C是B的下线
B/C缴纳有产品product1的加盟费后，成为该产品的加盟节点
则B/C在rules表中占据一行，在product-rule表中占据一行

如果A3在product1上发生消费，
则A2，A1，A，按比例返现
A按root的比例返现

如果A在product1上发生消费，
则三级、root的返现，全部给A

如果B在product1上发生消费
则三级、root的返现，全部给B

当某个节点的用户，在product1上发生消费时，需要确定该消费对应的root
算法：
1，查product-rule表，该product1有几个rule？
2，如果只有一个rule，则rules表中的root字段，即为所寻找的root
3，如果有2个以上的rule，则从rules表中查到相应的root值列表A，从发生消费的节点开始，向上追溯父节点，与列表A中的值对比，如果找到相同值，则停止上溯，此root值即为所寻找的root


某个节点，从普通节点升级为某个产品的加盟节点的数据库操作：
1，在rules表中增加一行，写入该节点的unionid、4个返现比例
2，在product-rule表中增加一行，写入productid和ruleid


